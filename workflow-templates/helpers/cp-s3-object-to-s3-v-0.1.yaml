# See the NOTICE file distributed with this work for additional information
# regarding copyright ownership.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cp-s3-object-to-s3-v-0.1.0
spec:
  entrypoint: cp-s3-object-to-s3

  templates:
    - name: cp-s3-object-to-s3
      inputs:
        parameters:
          - name: s3-endpoint
            value: "https://uk1s3.embassy.ebi.ac.uk"
          - name: in-bucket
            value: "ensembl-regulation-71319003-analysis-pipelines-b1"
          - name: out-bucket
            value: "ensembl-regulation-71319003-analysis-pipelines-b1"
          - name: in-s3-key
          - name: out-s3-key
      dag:
        tasks:
          - name: copy-s3-object-to-s3
            template: copy-s3-object-to-s3-boto3
            arguments:
              parameters:
                - name: s3-endpoint
                  value: "{{inputs.parameters.s3-endpoint}}"
                - name: in-bucket
                  value: "{{inputs.parameters.in-bucket}}"
                - name: out-bucket
                  value: "{{inputs.parameters.out-bucket}}"
                - name: in-s3-key
                  value: "{{inputs.parameters.in-s3-key}}"
                - name: out-s3-key
                  value: "{{inputs.parameters.out-s3-key}}"

    - name: copy-s3-object-to-s3-boto3
      retryStrategy:
        limit: "5"
        backoff:
          duration: "10s"
          factor: "2"
          maxDuration: "12h"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: s3-endpoint
          - name: in-bucket
          - name: out-bucket
          - name: in-s3-key
          - name: out-s3-key
      script:
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ensembl-regulation-s3embassy-credentials
                key: accessKey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: ensembl-regulation-s3embassy-credentials
                key: secretKey
        workingDir: /mnt/vol
        image: dockerhub.ebi.ac.uk/ensreg/workflows/container-images/python-wf-helper:3.11.7_0.1.0
        command: [ python ]
        source: |
          import boto3 as boto3 
          from botocore.client import Config

          from warnings import warn
          import sys
          import os

          def _config_s3_client(endpoint):
            config = Config(
                read_timeout=5000,
                connect_timeout=5000, 
                retries={"max_attempts": 3}
            )
            session = boto3.session.Session()

            s3_client = session.client(
                service_name="s3",
                endpoint_url=endpoint,
            )
            return s3_client


          def main() -> int:
            s3_endpoint = "{{inputs.parameters.s3-endpoint}}"

            s3_client = _config_s3_client(s3_endpoint)

            in_bucket_name = "{{inputs.parameters.in-bucket}}"
            in_s3_object_key = "{{inputs.parameters.in-s3-key}}"
          
            out_bucket_name = "{{inputs.parameters.out-bucket}}"
            out_s3_object_key = "{{inputs.parameters.out-s3-key}}"
          
          
            copy_source = {
                "Bucket": in_bucket_name,
                "Key": in_s3_object_key
            }
          
            s3_client.copy(copy_source, out_bucket_name, out_s3_object_key)


            return 0

          if __name__ == '__main__':
              sys.exit(main())

