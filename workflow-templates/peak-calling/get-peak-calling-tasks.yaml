# See the NOTICE file distributed with this work for additional information
# regarding copyright ownership.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: get-peak-calling-tasks-v-0.2.0
spec:
  entrypoint: get-peak-calling-tasks-dag

  templates:
    - name: get-peak-calling-tasks-dag
      inputs:
        parameters:
          - name: species_name
            value: ""
          - name: assembly_ensembl_accession
            value: ""
          - name: epigenome_group_id
            value: ""

          - name: experiment_type
            value: ""
          - name: target_type
            value: ""
          - name: epigenome_name_contains
            value: ""
          - name: experiment_name_contains
            value: ""
          - name: s3_object_key_contains
            value: ""
          - name: target_name_contains
            value: ""
          - name: histone_mark_type
            value: ""
          - name: min_replicate_count
            value: ""
          - name: max_replicate_count
            value: ""
          - name: control_filter
            value: ""

          - name: ad_hoc_playground_prefix
            value: ""
          - name: output_prefix_label
            value: ""

          - name: skip
            value: "0"
          - name: limit
            value: "20"

          - name: genrich-params-narrow
            value: ""
          - name: genrich-params-broad
            value: ""
          - name: genrich-params
            value: ""

          - name: overwrite-results
            value: "false"
          - name: production-run
            value: "false"
      dag:
        tasks:
          - name: get-peak-calling-tasks-v2-url
            template: compute-get-peak-calling-tasks-v2-url
            arguments:
              parameters:
                - name: svc-name
                  value: "regulation-pipelines-api-service"
                - name: namespace
                  value: "regulation-pipelines-api"

                - name: species_name
                  value: "{{inputs.parameters.species_name}}"
                - name: assembly_ensembl_accession
                  value: "{{inputs.parameters.assembly_ensembl_accession}}"
                - name: epigenome_group_id
                  value: "{{inputs.parameters.epigenome_group_id}}"

                - name: experiment_type
                  value: "{{inputs.parameters.experiment_type}}"
                - name: target_type
                  value: "{{inputs.parameters.target_type}}"
                - name: epigenome_name_contains
                  value: "{{inputs.parameters.epigenome_name_contains}}"
                - name: experiment_name_contains
                  value: "{{inputs.parameters.experiment_name_contains}}"
                - name: s3_object_key_contains
                  value: "{{inputs.parameters.s3_object_key_contains}}"
                - name: target_name_contains
                  value: "{{inputs.parameters.target_name_contains}}"
                - name: histone_mark_type
                  value: "{{inputs.parameters.histone_mark_type}}"
                - name: min_replicate_count
                  value: "{{inputs.parameters.min_replicate_count}}"
                - name: max_replicate_count
                  value: "{{inputs.parameters.max_replicate_count}}"
                - name: control_filter
                  value: "{{inputs.parameters.control_filter}}"

                - name: ad_hoc_playground_prefix
                  value: "{{inputs.parameters.ad_hoc_playground_prefix}}"
                - name: output_prefix_label
                  value: "{{inputs.parameters.output_prefix_label}}"

                - name: skip
                  value: "{{inputs.parameters.skip}}"
                - name: limit
                  value: "{{inputs.parameters.limit}}"

          - name: execute-get-peak-calling-tasks
            depends: "get-peak-calling-tasks-v2-url"
            templateRef:
              name: get-request-from-reg-pipelines-api-v-0.1.1
              template: get-request-from-reg-pipelines-api
            arguments:
              parameters:
                - name: url
                  value: "{{tasks.get-peak-calling-tasks-v2-url.outputs.result}}"

          - name: submit-chip-seq-peak-calling-tasks
            depends: "execute-get-peak-calling-tasks.Succeeded"
            when: "{{inputs.parameters.experiment_type}} == 'chip_seq'"
            templateRef:
              name: chip-seq-peaks-v-0.2.0
              template: peak-calling-chip-seq
            arguments:
              parameters:
                - name: peak-calling-tasks
                  value: "{{tasks.execute-get-peak-calling-tasks.outputs.result}}"
                - name: genrich-params-narrow
                  value: "{{inputs.parameters.genrich-params-narrow}}"
                - name: genrich-params-broad
                  value: "{{inputs.parameters.genrich-params-broad}}"
                - name: overwrite-results
                  value: "{{inputs.parameters.overwrite-results}}"
                - name: production-run
                  value: "{{inputs.parameters.production-run}}"

          - name: submit-open-chromatin-peak-calling-tasks
            depends: "execute-get-peak-calling-tasks.Succeeded"
            when: >-
              {{inputs.parameters.experiment_type}} == 'atac_seq' ||
              {{inputs.parameters.experiment_type}} == 'dnase_seq'
            templateRef:
              name: open-chromatin-peaks-v-0.2.0
              template: peak-calling-open-chromatin
            arguments:
              parameters:
                - name: peak-calling-tasks
                  value: "{{tasks.execute-get-peak-calling-tasks.outputs.result}}"
                - name: genrich-params
                  value: "{{inputs.parameters.genrich-params}}"
                - name: overwrite-results
                  value: "{{inputs.parameters.overwrite-results}}"
                - name: production-run
                  value: "{{inputs.parameters.production-run}}"

    - name: compute-get-peak-calling-tasks-v2-url
      retryStrategy:
        limit: "5"
        backoff:
          duration: "10s"
          factor: "2"
          maxDuration: "12h"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: svc-name
          - name: namespace

          - name: species_name
          - name: assembly_ensembl_accession
          - name: epigenome_group_id

          - name: experiment_type
          - name: target_type
          - name: epigenome_name_contains
          - name: experiment_name_contains
          - name: s3_object_key_contains
          - name: target_name_contains
          - name: histone_mark_type
          - name: min_replicate_count
          - name: max_replicate_count
          - name: control_filter

          - name: ad_hoc_playground_prefix
          - name: output_prefix_label
          - name: skip
          - name: limit
      script:
        image: dockerhub.ebi.ac.uk/ensreg/workflows/container-images/python-wf-helper:3.11.7_0.1.0
        command: [ python ]
        source: |
          import sys
          import os
          import urllib.parse

          def main() -> int:
          
            query_params = {
              "species_name": f"{{inputs.parameters.species_name}}",
              "assembly_ensembl_accession": f"{{inputs.parameters.assembly_ensembl_accession}}",
              "epigenome_group_id": f"{{inputs.parameters.epigenome_group_id}}",
              "experiment_type": f"{{inputs.parameters.experiment_type}}",
              "target_type": f"{{inputs.parameters.target_type}}",
              "epigenome_name_contains": f"{{inputs.parameters.epigenome_name_contains}}",
              "experiment_name_contains": f"{{inputs.parameters.experiment_name_contains}}",
              "s3_object_key_contains": f"{{inputs.parameters.s3_object_key_contains}}",
              "target_name_contains": f"{{inputs.parameters.target_name_contains}}",
              "histone_mark_type": f"{{inputs.parameters.histone_mark_type}}",
              "min_replicate_count": f"{{inputs.parameters.min_replicate_count}}",
              "max_replicate_count": f"{{inputs.parameters.max_replicate_count}}",
              "control_filter": f"{{inputs.parameters.control_filter}}",
              "ad_hoc_playground_prefix": f"{{inputs.parameters.ad_hoc_playground_prefix}}",
              "output_prefix_label": f"{{inputs.parameters.output_prefix_label}}",
              "skip": f"{{inputs.parameters.skip}}",
              "limit": f"{{inputs.parameters.limit}}",
            }
          
            parsed_query_params = "".join(
              [
                f"&{key}={value}" for key, value in query_params.items() 
                if value
              ]
            )
          
            url_str = (f"http://{{inputs.parameters.svc-name}}."
                  f"{{inputs.parameters.namespace}}."
                  "svc.cluster.local"
                  ":80"
                  "/api/v1"
                  "/peak_calling_tasks_v2"
                  f"?{parsed_query_params}"         
            )
          
            print(urllib.parse.quote(url_str, safe=":/?=&"))
          
            return 0

          if __name__ == '__main__':
              sys.exit(main())
