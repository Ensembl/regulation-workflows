# See the NOTICE file distributed with this work for additional information
# regarding copyright ownership.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: argoproj.io/v1alpha1
#kind: WorkflowTemplate
kind: Workflow
metadata:
  generateName: get-peak-calling-tasks-ad-hoc-
spec:
  entrypoint: get-peak-calling-tasks-dag
  imagePullSecrets:
    - name: ghcr-pull-token
  podGC:
    strategy: OnPodSuccess

  templates:
    - name: get-peak-calling-tasks-dag
      inputs:
        parameters:
          - name: assembly_ensembl_accession
            value: ""
          - name: experiment_type
            value: ""
          - name: species_name
            value: ""
          - name: epigenome_group_id
            value: ""
          - name: output_prefix_label
            value: ""
          - name: skip
            value: "0"
          - name: limit
            value: "20"
          - name: a
            value: "800"
          - name: q
            value: "0.1"
          - name: p_value_narrow
            value: "0.05"
          - name: p_value_broad
            value: "0.1"
          - name: masked_regions_prefix
          - name: masked_regions_filename
          - name: overwrite-results
            value: "false"
          - name: kubeconfig-path
      dag:
        tasks:
          - name: get-peak-calling-tasks-url
            template: compute-get-peak-calling-tasks-url
            arguments:
              parameters:
                - name: svc-name
                  value: "regulation-pipelines-api-service"
                - name: namespace
                  value: "regulation-pipelines-api"
                - name: assembly_ensembl_accession
                  value: "{{inputs.parameters.assembly_ensembl_accession}}"
                - name: experiment_type
                  value: "{{inputs.parameters.experiment_type}}"
                - name: species_name
                  value: "{{inputs.parameters.species_name}}"
                - name: epigenome_group_id
                  value: "{{inputs.parameters.epigenome_group_id}}"
                - name: output_prefix_label
                  value: "{{inputs.parameters.output_prefix_label}}"
                - name: skip
                  value: "{{inputs.parameters.skip}}"
                - name: limit
                  value: "{{inputs.parameters.limit}}"

          - name: execute-get-peak-calling-tasks
            depends: "get-peak-calling-tasks-url"
            templateRef:
              name: get-request-from-reg-pipelines-api-v1-submittable
              template: get-request-from-reg-pipelines-api
            arguments:
              parameters:
                - name: url
                  value: "{{tasks.get-peak-calling-tasks-url.outputs.result}}"

          - name: submit-atac-seq-peak-calling-tasks
            depends: "execute-get-peak-calling-tasks"
            when: "{{inputs.parameters.experiment_type}} == 'atac_seq'"
            templateRef:
              name: peak-calling-atac-seq-v1-submittable
              template: peak-calling-atac-seq
            arguments:
              parameters:
                - name: peak_calling_tasks
                  value: "{{tasks.execute-get-peak-calling-tasks.outputs.result}}"
                - name: masked_regions_prefix
                  value: "{{inputs.parameters.masked_regions_prefix}}"
                - name: masked_regions_filename
                  value: "{{inputs.parameters.masked_regions_filename}}"
                - name: overwrite-results
                  value: "{{inputs.parameters.overwrite-results}}"
                - name: kubeconfig-path
                  value: "{{inputs.parameters.kubeconfig-path}}"

          - name: submit-dnase-seq-peak-calling-tasks
            depends: "execute-get-peak-calling-tasks"
            when: "{{inputs.parameters.experiment_type}} == 'dnase_seq'"
            templateRef:
              name: peak-calling-dnase-seq-v1-submittable
              template: peak-calling-dnase-seq
            arguments:
              parameters:
                - name: peak_calling_tasks
                  value: "{{tasks.execute-get-peak-calling-tasks.outputs.result}}"
                - name: masked_regions_prefix
                  value: "{{inputs.parameters.masked_regions_prefix}}"
                - name: masked_regions_filename
                  value: "{{inputs.parameters.masked_regions_filename}}"
                - name: overwrite-results
                  value: "{{inputs.parameters.overwrite-results}}"
                - name: kubeconfig-path
                  value: "{{inputs.parameters.kubeconfig-path}}"

          - name: submit-chip-seq-peak-calling-tasks
            depends: "execute-get-peak-calling-tasks"
            when: "{{inputs.parameters.experiment_type}} == 'chip_seq'"
            templateRef:
              name: peak-calling-chip-seq-ad-hoc-v1-submittable
              template: peak-calling-chip-seq
            arguments:
              parameters:
                - name: peak_calling_tasks
                  value: "{{tasks.execute-get-peak-calling-tasks.outputs.result}}"
                - name: a
                  value: "{{inputs.parameters.a}}"
                - name: q
                  value: "{{inputs.parameters.q}}"
                - name: p_value_narrow
                  value: "{{inputs.parameters.p_value_narrow}}"
                - name: p_value_broad
                  value: "{{inputs.parameters.p_value_broad}}"
                - name: masked_regions_prefix
                  value: "{{inputs.parameters.masked_regions_prefix}}"
                - name: masked_regions_filename
                  value: "{{inputs.parameters.masked_regions_filename}}"
                - name: overwrite-results
                  value: "{{inputs.parameters.overwrite-results}}"
                - name: kubeconfig-path
                  value: "{{inputs.parameters.kubeconfig-path}}"

    - name: compute-get-peak-calling-tasks-url
      inputs:
        parameters:
          - name: svc-name
          - name: namespace
          - name: assembly_ensembl_accession
          - name: experiment_type
          - name: species_name
          - name: epigenome_group_id
          - name: output_prefix_label
          - name: skip
          - name: limit
      script:
        image: ghcr.io/daugo/ensembl-reg-python:latest
        command: [ python ]
        source: |
          import sys
          import os
          import urllib.parse

          def main() -> int:
          
            query_params = {
              "limit": f"{{inputs.parameters.limit}}",
              "skip": f"{{inputs.parameters.skip}}",
              "assembly_ensembl_accession": f"{{inputs.parameters.assembly_ensembl_accession}}",
              "experiment_type": f"{{inputs.parameters.experiment_type}}",
              "species_name": f"{{inputs.parameters.species_name}}",
              "epigenome_group_id": f"{{inputs.parameters.epigenome_group_id}}",
              "output_prefix_label": f"{{inputs.parameters.output_prefix_label}}",
            }
          
            parsed_query_params = "".join(
              [
                f"&{key}={value}" for key, value in query_params.items() 
                if value
              ]
            )
          
            url_str = (f"http://{{inputs.parameters.svc-name}}."
                  f"{{inputs.parameters.namespace}}."
                  "svc.cluster.local"
                  ":80"
                  "/api/v1"
                  "/peak_calling_tasks"
                  f"?{parsed_query_params}"         
            )
          
            print(urllib.parse.quote(url_str, safe=":/?=&"))
          
            return 0

          if __name__ == '__main__':
              sys.exit(main())
