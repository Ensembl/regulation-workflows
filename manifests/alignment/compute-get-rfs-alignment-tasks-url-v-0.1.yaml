apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: compute-rfs-alignment-tasks-url-v-0.1.0
spec:
  entrypoint: compute-rfs-alignment-tasks-url

  templates:
    - name: compute-rfs-alignment-tasks-url
      retryStrategy:
        limit: "5"
        backoff:
          duration: "10s"
          factor: "2"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: svc-name
          - name: namespace
          - name: assembly_ensembl_accession
          - name: experiment_type
          - name: species_name
          - name: epigenome_name_contains
          - name: experiment_name_contains
          - name: target_type
          - name: epigenome_group_id
          - name: skip
          - name: limit
          - name: exclude_tasks_with_registered_results
          - name: group_by_run_type
      script:
        image: dockerhub.ebi.ac.uk/ensreg/workflows/container-images/python-wf-helper:3.11.7_0.1.0
        command: [ python ]
        source: |
          import sys
          import os
          import urllib.parse


          def main() -> int:

            query_params = {
              "limit": f"{{inputs.parameters.limit}}",
              "skip": f"{{inputs.parameters.skip}}",
              "assembly_ensembl_accession": f"{{inputs.parameters.assembly_ensembl_accession}}",
              "experiment_type": f"{{inputs.parameters.experiment_type}}",
              "species_name": f"{{inputs.parameters.species_name}}",
              "epigenome_name_contains": f"{{inputs.parameters.epigenome_name_contains}}",
              "experiment_name_contains": f"{{inputs.parameters.experiment_name_contains}}",
              "target_type": f"{{inputs.parameters.target_type}}",
              "epigenome_group_id": f"{{inputs.parameters.epigenome_group_id}}",
              "exclude_tasks_with_registered_results": f"{{inputs.parameters.exclude_tasks_with_registered_results}}",
              "group_by_run_type": f"{{inputs.parameters.group_by_run_type}}",
            }

            parsed_query_params = "".join(
              [
                f"&{key}={value}" for key, value in query_params.items() 
                if value
              ]
            )

            url_str = (f"http://{{inputs.parameters.svc-name}}."
                  f"{{inputs.parameters.namespace}}."
                  "svc.cluster.local"
                  ":80"
                  "/api/v1"
                  "/rfs_alignment_tasks"
                  f"?{parsed_query_params[1:]}"
            )  

            print(urllib.parse.quote(url_str, safe=":/?=&"))

            return 0

          if __name__ == '__main__':
              sys.exit(main())
