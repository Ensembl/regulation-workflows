apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: genrich-pq-values-to-bigwig-pvc-callable-v1-submittable-
  annotations:
    workflows.argoproj.io/description: |
      Generate bigwig files (signals) from genrich pq-values files
spec:
  entrypoint: genrich-pq-values-to-bigwig-pvc-callable
  
  imagePullSecrets:
    - name: ghcr-pull-token
  
  podGC:
    strategy: OnPodSuccess

  templates:
    - name: genrich-pq-values-to-bigwig-pvc-callable
      inputs:
        parameters:
          - name: experiment-id
          - name: assembly-id
          - name: pvc-name
          - name: pq-values-filename
          - name: chrom-sizes-s3-key
          - name: signal-s3-key
            
      dag:
        tasks:
          - name: create-bed-from-pq-values
            template: create-bed-from-pq-values-cmd
            arguments:
              parameters:
                - name: pq-values-filename
                  value: "{{inputs.parameters.pq-values-filename}}"
                - name: signal-basename
                  value: "{{=sprig.trimSuffix(sprig.ext(inputs.parameters['signal-s3-key']), sprig.base(inputs.parameters['signal-s3-key']))}}"
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
          
          - name: convert-bed-to-bigwig
            depends: "create-bed-from-pq-values.Succeeded"
            template: convert-bed-to-bigwig-cmd
            arguments:
              parameters:
                - name: signal-s3-key
                  value: "{{inputs.parameters.signal-s3-key}}"
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
                - name: chrom-sizes-s3-key
                  value: "{{inputs.parameters.chrom-sizes-s3-key}}"

          - name: execute-compute-bigwig-file-metadata
            depends: convert-bed-to-bigwig
            templateRef:
              name: compute-file-metadata-pvc-callable-v1-submittable
              template: compute-file-metadata-pvc-callable
            arguments:
              parameters:
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
                - name: filename
                  value: "{{=sprig.base(inputs.parameters['signal-s3-key'])}}"

          - name: execute-post-signal-file
            depends: execute-compute-bigwig-file-metadata
            template: post-signal-file
            arguments:
              parameters:
                - name: s3-key
                  value: "{{inputs.parameters.signal-s3-key}}"
                - name: basename
                  value: "{{=sprig.trimSuffix(sprig.ext(inputs.parameters['pq-values-filename']), sprig.base(inputs.parameters['pq-values-filename']))}}"
                - name: file-size
                  value: "{{tasks.execute-compute-bigwig-file-metadata.outputs.parameters.file-size}}"
                - name: md5sum
                  value: "{{tasks.execute-compute-bigwig-file-metadata.outputs.parameters.md5sum}}"
                - name: experiment-id
                  value: "{{inputs.parameters.experiment-id}}"
                - name: assembly-id
                  value: "{{inputs.parameters.assembly-id}}"
    

    - name: create-bed-from-pq-values-cmd
      retryStrategy:
        limit: "5"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: pq-values-filename
          - name: signal-basename
          - name: pvc-name
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: '{{inputs.parameters.pvc-name}}'
      container:
        workingDir: /mnt/vol
        image: ghcr.io/daugo/ensembl-reg-bedsort:latest
        command: [ bash, -c, -ue, -o, xtrace ]
        args: [
          "ls -altrh \
          && awk 'FNR > 1 { if ($NF != \"NA\" && $NF != \"*\") { print $1\"\t\"$2\"\t\"$3\"\t\"$NF } else if ($NF != \"NA\" && $NF == \"*\") { print $1\"\t\"$2\"\t\"$3\"\t\"$(NF-1) } }' {{inputs.parameters.pq-values-filename}} > {{inputs.parameters.signal-basename}}.bed \
          && bedSort {{inputs.parameters.signal-basename}}.bed {{inputs.parameters.signal-basename}}.sorted.bed \
          && rm -f {{inputs.parameters.signal-basename}}.bed \
          && ls -altrh"
        ]
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
        resources:
          limits:
            cpu: 2900m
            memory: 25Gi
          requests:
            cpu: 2500m
            memory: 20Gi


    - name: convert-bed-to-bigwig-cmd
      retryStrategy:
        limit: "5"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: signal-s3-key
          - name: pvc-name
          - name: chrom-sizes-s3-key
          
        artifacts:
          - name: chrom_sizes_file
            path: /mnt/vol/chrom.sizes
            s3:
              key: "{{inputs.parameters.chrom-sizes-s3-key}}"
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: '{{inputs.parameters.pvc-name}}'
      container:
        workingDir: /mnt/vol
        image: ghcr.io/daugo/ensembl-reg-bedgraphtobigwig:latest
        command: [ bash, -c, -ue, -o, xtrace ]
        args: [ 
          "ls -altrh \
          && rm -f {{=sprig.base(inputs.parameters['signal-s3-key'])}} \
          && bedGraphToBigWig {{=sprig.trimSuffix(sprig.ext(inputs.parameters['signal-s3-key']), sprig.base(inputs.parameters['signal-s3-key']))}}.sorted.bed chrom.sizes {{=sprig.base(inputs.parameters['signal-s3-key'])}} \
          && rm -f {{=sprig.trimSuffix(sprig.ext(inputs.parameters['signal-s3-key']), sprig.base(inputs.parameters['signal-s3-key']))}}.sorted.bed \
          && ls -altrh" 
        ]
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
        resources:
          limits:
            cpu: 2900m
            memory: 25Gi
          requests:
            cpu: 2500m
            memory: 20Gi
      outputs:
        artifacts:
          - name: final_bigwig
            path: "/mnt/vol/{{=sprig.base(inputs.parameters['signal-s3-key'])}}"
            archive:
              none: { }
            s3:
              key: "{{inputs.parameters.signal-s3-key}}"


    - name: post-signal-file
      retryStrategy:
        limit: "5"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: s3-key
          - name: basename
          - name: file-size
          - name: md5sum
          - name: experiment-id
          - name: assembly-id
      script:
        image: ghcr.io/daugo/ensembl-reg-python:latest
        command: [ python ]
        source: |
          import sys
          import os
          import hashlib
          import json
          
          def main() -> int:
          
            post_data = {
              "experiment_id": "{{inputs.parameters.experiment-id}}",
              "assembly_id": "{{inputs.parameters.assembly-id}}",
              "analysis_type": "signal",
              "file": {
                "file_type": "bigwig",
                "basename": "{{inputs.parameters.basename}}",
                "size": "{{inputs.parameters.file-size}}",
                "md5sum": "{{inputs.parameters.md5sum}}",
                "imported": False,
                "s3_object": {
                  "key": "{{inputs.parameters.s3-key}}",
                  "bucket_id": "085c4884-d0d6-4725-bda2-7463deed86eb"
                }
              }
            }
          
            print(json.dumps(post_data,  indent=2))
          
            return 0
          
          if __name__ == '__main__':
              sys.exit(main())   
