apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
# kind: Workflow
metadata:
  generateName: compute-bigwig-from-pileup-
  annotations:
    workflows.argoproj.io/description: |
      Generate bigwig files (signals) from genrich pileup files
spec:
  entrypoint: compute-bigwig-from-pileup-dag
  
  imagePullSecrets:
    - name: ghcr-pull-token
  
  podGC:
    strategy: OnPodSuccess

  templates:
    - name: compute-bigwig-from-pileup-dag
      inputs:
        parameters:
          - name: pvc-name
          - name: pileup_filename
          - name: chrom_sizes_s3_key
            
      dag:
        tasks:
          - name: create-bed-from-pileup
            template: create-bed-from-pileup-cmd
            arguments:
              parameters:
                - name: pileup_filename
                  value: "{{inputs.parameters.pileup_filename}}"
                - name: signal_basename
                  value: "signal{{=sprig.trimPrefix('peaks', sprig.trimSuffix('_pileup.log', inputs.parameters.pileup_filename))}}"
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
          
          - name: convert-bed-to-bigwig
            depends: "create-bed-from-pileup.Succeeded"
            template: convert-bed-to-bigwig-cmd
            arguments:
              parameters:
                - name: signal_basename
                  value: "signal{{=sprig.trimPrefix('peaks', sprig.trimSuffix('_pileup.log', inputs.parameters.pileup_filename))}}"
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
                - name: chrom_sizes_s3_key
                  value: "{{inputs.parameters.chrom_sizes_s3_key}}"
          
          - name: remove-intermediate-files-from-pvc
            depends: "convert-bed-to-bigwig.Succeeded"
            template: remove-intermediate-files-from-pvc-cmd
            arguments:
              parameters:
                - name: signal_basename
                  value: "signal{{=sprig.trimPrefix('peaks', sprig.trimSuffix('_pileup.log', inputs.parameters.pileup_filename))}}"
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
    

    - name: create-bed-from-pileup-cmd
      retryStrategy:
        limit: "5"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: pileup_filename
          - name: signal_basename
          - name: pvc-name
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: '{{inputs.parameters.pvc-name}}'
      container:
        workingDir: /mnt/vol
        image: ghcr.io/daugo/ensembl-reg-bedsort:latest
        command: [ bash, -c ]
        args: [ 
          "ls -altrh \
          && awk 'FNR > 1 { if ($NF != \"NA\" && $NF != \"*\") { print $1\"\t\"$2\"\t\"$3\"\t\"$NF } else if ($NF != \"NA\" && $NF == \"*\") { print $1\"\t\"$2\"\t\"$3\"\t\"$(NF-1) } }' {{inputs.parameters.pileup_filename}} > {{inputs.parameters.signal_basename}}.bed \
          && bedSort {{inputs.parameters.signal_basename}}.bed {{inputs.parameters.signal_basename}}.sorted.bed \
          && ls -altrh"
        ]
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
        resources:
          limits:
            cpu: 2900m
            memory: 25Gi
          requests:
            cpu: 2500m
            memory: 20Gi


    - name: convert-bed-to-bigwig-cmd
      retryStrategy:
        limit: "5"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: signal_basename
          - name: pvc-name
          - name: chrom_sizes_s3_key
          
        artifacts:
          - name: chrom_sizes_file
            path: /mnt/vol/chrom.sizes
            s3:
              key: "{{inputs.parameters.chrom_sizes_s3_key}}"
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: '{{inputs.parameters.pvc-name}}'
      container:
        workingDir: /mnt/vol
        image: ghcr.io/daugo/ensembl-reg-bedgraphtobigwig:latest
        command: [ bash, -c ]
        args: [ "ls -altrh \
                 && rm -f {{inputs.parameters.signal_basename}}.bw \
                 && bedGraphToBigWig {{inputs.parameters.signal_basename}}.sorted.bed chrom.sizes {{inputs.parameters.signal_basename}}.bw \
                 && ls -altrh" ]
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
        resources:
          limits:
            cpu: 2900m
            memory: 25Gi
          requests:
            cpu: 2500m
            memory: 20Gi
      outputs:
        parameters:
          - name: signal_filename
            value: "{{inputs.parameters.signal_basename}}.bw"


    - name: remove-intermediate-files-from-pvc-cmd
      retryStrategy:
        limit: "5"
        retryPolicy: "Always"
      inputs:
        parameters:
          - name: signal_basename
          - name: pvc-name
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: '{{inputs.parameters.pvc-name}}'
      container:
        workingDir: /mnt/vol
        image: ghcr.io/daugo/ensembl-reg-bedsort:latest
        command: [ bash, -c ]
        args: [ "rm -f {{inputs.parameters.signal_basename}}*.bed" ]
