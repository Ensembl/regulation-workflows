apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: chip-seq-v2-peaks-v1-submittable
  annotations:
    workflows.argoproj.io/description: |
      Genrich re-runs from Genrich pq_values to generate peaks tracks for ChIP-seq experiments.
      Support for narrow and broad peaks.
spec:
  entrypoint: peak-calling-chip-seq
  imagePullSecrets:
    - name: ghcr-pull-token

  templates:
    - name: peak-calling-chip-seq
      parallelism: 8
      inputs:
        parameters:
          - name: peak-calling-tasks
          #### Genrich parameters ####
          - name: genrich-params-narrow
          #            value: |
          #              {
          #                "a": null,
          #                "q_val": null,
          #                "p_val": 0.05,
          #                "g": null
          #              }
          - name: genrich-params-broad
          #            value: |
          #              {
          #                "a": 800,
          #                "q_val": null,
          #                "p_val": 0.1,
          #                "g": 200
          #              }
          - name: masked-regions-s3-key
          ############################
          - name: overwrite-results
            value: "false"
          - name: kubeconfig-path
      dag:
        tasks:
          - name: execute-peak-calling-task
            template: peak-calling-task
            arguments:
              parameters:
                - name: task-payload
                  value: "{{item}}"
                - name: genrich-params-narrow
                  value: "{{inputs.parameters.genrich-params-narrow}}"
                - name: genrich-params-broad
                  value: "{{inputs.parameters.genrich-params-broad}}"
                - name: masked-regions-s3-key
                  value: "{{inputs.parameters.masked-regions-s3-key}}"
                - name: overwrite-results
                  value: "{{inputs.parameters.overwrite-results}}"
                - name: kubeconfig-path
                  value: "{{inputs.parameters.kubeconfig-path}}"
            withParam: "{{inputs.parameters.peak-calling-tasks}}"

    - name: peak-calling-task
      parallelism: 8
      inputs:
        parameters:
          - name: task-payload
          - name: genrich-params-narrow
          - name: genrich-params-broad
          - name: masked-regions-s3-key
          - name: overwrite-results
          - name: kubeconfig-path
      dag:
        tasks:
          - name: get-s3-keys-and-set-of-genrich-cmds
            template: compute-peak-calling-outputs-s3-keys
            arguments:
              parameters:
                - name: task-payload
                  value: "{{inputs.parameters.task-payload}}"
                - name: genrich-params-narrow
                  value: "{{inputs.parameters.genrich-params-narrow}}"
                - name: genrich-params-broad
                  value: "{{inputs.parameters.genrich-params-broad}}"

          #          - name: check-if-outputs-exist
          #            depends: get-s3-keys-and-set-of-genrich-cmds.Succeeded
          #            templateRef:
          #              name: check-s3-object-exists-v1-submittable
          #              template: check-s3-object-exists
          #            arguments:
          #              parameters:
          #                - name: s3-key
          #                  value: "{{item}}"
          #            withItems:

          - name: get-peak-calling-pvc-size
            #            depends: check-if-outputs-exist.Succeeded
            depends: get-s3-keys-and-set-of-genrich-cmds.Succeeded
            templateRef:
              name: compute-pvc-size-v1-submittable
              template: compute-pvc-size
            arguments:
              parameters:
                - name: associated_files_size
                  value: "{{=jsonpath(inputs.parameters['task-payload'], '$.alignment_files_total_size')}}"
                - name: size_factor
                  value: "1"

          - name: create-peak-calling-pvc
            depends: get-peak-calling-pvc-size.Succeeded
            templateRef:
              name: create-pvc-kubectl-v1-submittable
              template: create-pvc-kubectl
            arguments:
              parameters:
                - name: pvc-size
                  value: "{{tasks.get-peak-calling-pvc-size.outputs.parameters.pvc-size-formatted}}"
                - name: kubeconfig-path
                  value: "{{inputs.parameters.kubeconfig-path}}"

          - name: load-pq-values-to-pvc
            depends: create-peak-calling-pvc.Succeeded
            templateRef:
              name: s3-object-to-pvc-v1-submittable
              template: s3-object-to-pvc
            arguments:
              parameters:
                - name: s3-key
                  value: "{{=jsonpath(inputs.parameters['task-payload'], '$.pq_values_s3_key')}}"
                - name: filename
                  value: "{{=sprig.base(jsonpath(inputs.parameters['task-payload'], '$.pq_values_s3_key'))}}"
                - name: pvc-name
                  value: "{{tasks.create-peak-calling-pvc.outputs.parameters.pvc-name}}"

          - name: execute-peak-calling-narrow-case
            depends: load-pq-values-to-pvc.Succeeded
            #            when: {{tasks.check-if-outputs-exist.outputs.parameters.s3-object-exists}} == false
            template: genrich-re-run-cmd
            arguments:
              parameters:
                - name: pq-values-pvc-name
                  value: "{{tasks.create-peak-calling-pvc.outputs.parameters.pvc-name}}"
                - name: pq-values-filename
                  value: "{{=sprig.base(jsonpath(inputs.parameters['task-payload'], '$.pq_values_s3_key'))}}"
                - name: params-cmd-string
                  value: "{{tasks.get-s3-keys-and-set-of-genrich-cmds.outputs.parameters.narrow-parameters-str}}"
                - name: masked-regions-s3-key
                  value: "{{inputs.parameters.masked-regions-s3-key}}"
                - name: masked-regions-filename
                  value: "{{=sprig.base(inputs.parameters['masked-regions-s3-key'])}}"
                - name: out-s3-key
                  value: "{{tasks.get-s3-keys-and-set-of-genrich-cmds.outputs.parameters.narrow-peaks-s3-key}}"
                - name: out-filename
                  value: "{{=sprig.base(tasks['get-s3-keys-and-set-of-genrich-cmds'].outputs.parameters['narrow-peaks-s3-key'])}}"

          - name: execute-peak-calling-broad-case
            depends: execute-peak-calling-narrow-case.Succeeded
            when: "{{=jsonpath(inputs.parameters['task-payload'], '$.broad_peaks')}} == true"
            template: genrich-re-run-cmd
            arguments:
              parameters:
                - name: pq-values-pvc-name
                  value: "{{tasks.create-peak-calling-pvc.outputs.parameters.pvc-name}}"
                - name: pq-values-filename
                  value: "{{=sprig.base(jsonpath(inputs.parameters['task-payload'], '$.pq_values_s3_key'))}}"
                - name: params-cmd-string
                  value: "{{tasks.get-s3-keys-and-set-of-genrich-cmds.outputs.parameters.broad-parameters-str}}"
                - name: masked-regions-s3-key
                  value: "{{inputs.parameters.masked-regions-s3-key}}"
                - name: masked-regions-filename
                  value: "{{=sprig.base(inputs.parameters['masked-regions-s3-key'])}}"
                - name: out-s3-key
                  value: "{{tasks.get-s3-keys-and-set-of-genrich-cmds.outputs.parameters.broad-peaks-s3-key}}"
                - name: out-filename
                  value: "{{=sprig.base(tasks.get-s3-keys-and-set-of-genrich-cmds.outputs.parameters['broad-peaks-s3-key'])}}"

          - name: execute-write-gapped-peaks
            depends: execute-peak-calling-broad-case.Succeeded
            template: write-gapped-peaks
            arguments:
              parameters:
                - name: narrow-peaks-s3-key
                  value: "{{tasks.get-s3-keys-and-set-of-genrich-cmds.outputs.parameters.narrow-peaks-s3-key}}"
                - name: broad-peaks-s3-key
                  value: "{{tasks.get-s3-keys-and-set-of-genrich-cmds.outputs.parameters.broad-peaks-s3-key}}"
                - name: gapped-peaks-s3-key
                  value: "{{tasks.get-s3-keys-and-set-of-genrich-cmds.outputs.parameters.gapped-peaks-s3-key}}"

          - name: delete-peak-calling-pvc
            depends: execute-peak-calling-narrow-case.Succeeded && execute-peak-calling-broad-case
            templateRef:
              name: delete-patch-pvc-kubectl-v1-submittable
              template: delete-patch-pvc-kubectl
            arguments:
              parameters:
                - name: pvc-name
                  value: "{{tasks.create-peak-calling-pvc.outputs.parameters.pvc-name}}"
                - name: kubeconfig-path
                  value: "{{inputs.parameters.kubeconfig-path}}"



    - name: genrich-re-run-cmd
      retryStrategy:
        limit: "5"
        backoff:
          duration: "10s"
          factor: "2"
          maxDuration: "12h"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: pq-values-pvc-name
          - name: pq-values-filename
          - name: params-cmd-string
          - name: masked-regions-s3-key
          - name: masked-regions-filename

          - name: out-s3-key
          - name: out-filename
        artifacts:
          - name: masked-regions-file
            path: "/mnt/vol/{{inputs.parameters.masked-regions-filename}}"
            s3:
              key: "{{inputs.parameters.masked-regions-s3-key}}"
      container:
        workingDir: /mnt/vol
        image: ghcr.io/daugo/ensembl-reg-genrich:latest
        command: [ bash, -c, -uef, -o, xtrace ]
        args: [ "ls -altrh \
                && GENRICH_ARGS=(
                  -P \
                  -o {{inputs.parameters.out-filename}} \
                  -f {{inputs.parameters.pq-values-filename}} \
                  -s 20 \
                  -r \
                  -y \
                  -e MT \
                  -E {{inputs.parameters.masked-regions-filename}} \
                  -v \
                ) \
                && GENRICH_ARGS+=( {{inputs.parameters.params-cmd-string}} ) \
                && Genrich ${GENRICH_ARGS[@]} \
                && ls -altrh" ]
        resources:
          limits:
            cpu: 1900m
            memory: 1.5Gi
          requests:
            cpu: 900m
            memory: 1Gi
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: "{{inputs.parameters.pq-values-pvc-name}}"
      outputs:
        artifacts:
          - name: bed-file
            path: /mnt/vol/{{inputs.parameters.out-filename}}
            archive:
              none: { }
            s3:
              key: "{{inputs.parameters.out-s3-key}}"


    - name: compute-peak-calling-outputs-s3-keys
      retryStrategy:
        limit: "5"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: task-payload
          - name: genrich-params-narrow
          - name: genrich-params-broad
      script:
        workingDir: /results/
        image: ghcr.io/daugo/ensembl-reg-python:latest
        command: [ python ]
        source: |
          import sys
          import json
          import logging
          
          from pprint import pprint
          from uuid import UUID
          
          from typing import (
            Optional,
            Union,
          )
          
          from pydantic import BaseModel, validator

          class PeakCallingFromPileupsTask(BaseModel):
              epigenome_name: str
              experiment_name: str
              experiment_id: UUID
              pq_values_s3_key: str
              assembly_id: UUID
              experiment_type: str
              out_basename: str
              out_s3_prefix: str
              alignment_files_total_size: int
              broad_peaks: Union[bool, None] = None
          
          class GenrichParams(BaseModel):
            a: Optional[float]
            q_val: Optional[float]
            p_val: Optional[float]
            g: Optional[int]
          
            @validator('p_val')
            def ignore_p_val(cls, v, values):
              if 'q_val' in values and values['q_val'] is not None:
                logging.warning('Ignoring p_val parameter because q_val was provided') 
                return None
              return v
          
            @property
            def cmd_portion(self) -> str:
              params_cmd_portion = ""
              if self.a is not None:
                params_cmd_portion += f"-a {self.a} "
              if self.q_val is not None:
                params_cmd_portion += f"-q {self.q_val} "
              if self.p_val is not None:
                params_cmd_portion += f"-p {self.p_val} "
              if self.g is not None:
                params_cmd_portion += f"-g {self.g} "
              return params_cmd_portion
          
            @property
            def suffix_portion(self) -> str:
              params_suffix_portion = ""
              if self.a is not None:
                  params_suffix_portion += f"_a_{self.a}"
              if self.q_val is not None:
                  params_suffix_portion += f"_q_{self.q_val}"
              if self.p_val is not None:
                  params_suffix_portion += f"_p_{self.p_val}"
              if self.g is not None:
                  params_suffix_portion += f"_g_{self.g}"
              return params_suffix_portion
          
          def main() -> int:
          
            task_payload = """{{inputs.parameters.task-payload}}"""
            genrich_params_narrow = """{{inputs.parameters.genrich-params-narrow}}"""
            genrich_params_broad = """{{inputs.parameters.genrich-params-broad}}"""
          
            task_payload_data = json.loads(task_payload)
            genrich_params_narrow_data = json.loads(genrich_params_narrow)
            genrich_params_broad_data = json.loads(genrich_params_broad)
          
          
            task = PeakCallingFromPileupsTask(**task_payload_data)
            params_narrow = GenrichParams(**genrich_params_narrow_data)
            params_broad = GenrichParams(**genrich_params_broad_data)

            # TODO: Refactor this part
            with open("narrow_params_str.txt", 'w') as f:
                f.write(params_narrow.cmd_portion)
          
            with open("broad_params_str.txt", 'w') as f:  
                f.write(params_broad.cmd_portion)
          
            with open("narrow_s3_keys.txt", 'w') as f:
                f.write(f"{task.out_s3_prefix}narrow-{task.out_basename}{params_narrow.suffix_portion}.bed")
          
            with open("broad_s3_keys.txt", 'w') as f:
                f.write(f"{task.out_s3_prefix}broad-{task.out_basename}{params_broad.suffix_portion}.bed")
          
            with open("gapped_s3_keys.txt", 'w') as f:
                f.write(f"{task.out_s3_prefix}gapped-{task.out_basename}.bed")
          
            return 0
          
          if __name__ == '__main__':
              sys.exit(main())

      outputs:
        parameters:
          - name: narrow-parameters-str
            valueFrom:
              path: /results/narrow_params_str.txt
          - name: broad-parameters-str
            valueFrom:
              path: /results/broad_params_str.txt
          - name: narrow-peaks-s3-key
            valueFrom:
              path: /results/narrow_s3_keys.txt
          - name: broad-peaks-s3-key
            valueFrom:
              path: /results/broad_s3_keys.txt
          - name: gapped-peaks-s3-key
            valueFrom:
              path: /results/gapped_s3_keys.txt


    - name: write-gapped-peaks
      retryStrategy:
        limit: "3"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: narrow-peaks-s3-key
          - name: broad-peaks-s3-key
          - name: gapped-peaks-s3-key
        artifacts:
          - name: narrow_peaks_file
            path: "/results/{{=sprig.base(inputs.parameters.narrow-peaks-s3-key)}}"
            s3:
              key: "{{inputs.parameters.narrow-peaks-s3-key}}"
          - name: broad_peaks_file
            path: "/results/{{=sprig.base(inputs.parameters.broad-peaks-s3-key)}}"
            s3:
              key: "{{inputs.parameters.broad-peaks-s3-key}}"
      container:
        workingDir: /results
        image: ghcr.io/daugo/ensembl-reg-gapped-peaks:latest
        command: [ bash, -c, -uef, -o, xtrace ]
        args: [ " ls -altrh \
              && SCRIPT_PATH=/usr/local/bin/writeGappedPeaks.py \
              && python ${SCRIPT_PATH} \
              {{=sprig.base(inputs.parameters.broad-peaks-s3-key)}} \
              {{=sprig.base(inputs.parameters.narrow-peaks-s3-key)}} \
              {{=sprig.base(inputs.parameters.gapped-peaks-s3-key)}}" ]
      outputs:
        artifacts:
          - name: gapped_peaks_file
            path: "/results/{{=sprig.base(inputs.parameters.gapped-peaks-s3-key)}}"
            archive:
              none: { }
            s3:
              key: "{{inputs.parameters.gapped-peaks-s3-key}}"
