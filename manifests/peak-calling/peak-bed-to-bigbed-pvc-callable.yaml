apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: peak-bed-to-bigbed-pvc-callable-v1-submittable
  annotations:
    workflows.argoproj.io/description: |
      Generate bigbed file from peak bed file
spec:
  entrypoint: peak-bed-to-bigbed-pvc-callable
  
  imagePullSecrets:
    - name: ghcr-pull-token
  
  podGC:
    strategy: OnPodSuccess

  templates:
    - name: peak-bed-to-bigbed-pvc-callable
      inputs:
        parameters:
          - name: experiment-id
          - name: assembly-id
          - name: pvc-name
          - name: peak-bed-filename
          - name: chrom-sizes-s3-key
          - name: peak-bigbed-s3-key
          - name: histone-mark-type
      dag:
        tasks:
          - name: sort-peak-bed
            template: sort-peak-bed-cmd
            arguments:
              parameters:
                - name: peak-bed-filename
                  value: "{{inputs.parameters.peak-bed-filename}}"
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
        
          - name: convert-broad-bed-to-bigbed
            depends: >-
              sort-peak-bed.Succeeded
            template: convert-broad-bed-to-bigbed-cmd
            when: >-
              {{inputs.parameters.histone-mark-type}} == broad
            arguments:
              parameters:
                - name: peak-bed-filename
                  value: "{{inputs.parameters.peak-bed-filename}}"
                - name: peak-bigbed-s3-key
                  value: "{{inputs.parameters.peak-bigbed-s3-key}}"
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
                - name: chrom-sizes-s3-key
                  value: "{{inputs.parameters.chrom-sizes-s3-key}}"

          - name: convert-narrow-bed-to-bigbed
            depends: >-
              sort-peak-bed.Succeeded
            template: convert-narrow-bed-to-bigbed-cmd
            when: >-
              {{inputs.parameters.histone-mark-type}} == narrow
            arguments:
              parameters:
                - name: peak-bed-filename
                  value: "{{inputs.parameters.peak-bed-filename}}"
                - name: peak-bigbed-s3-key
                  value: "{{inputs.parameters.peak-bigbed-s3-key}}"
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
                - name: chrom-sizes-s3-key
                  value: "{{inputs.parameters.chrom-sizes-s3-key}}"

          - name: remove-intermediate-sorted-bed-file-from-pvc
            depends: >- 
              convert-narrow-bed-to-bigbed.Succeeded || convert-broad-bed-to-bigbed.Succeeded
            templateRef:
              name: delete-file-from-pvc-v1-submittable
              template: delete-file-from-pvc
            arguments:
              parameters:
                - name: file-path
                  value: "{{=sprig.trimSuffix(sprig.ext(inputs.parameters['peak-bed-filename']), sprig.base(inputs.parameters['peak-bed-filename']))}}.sorted.bed"
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"

          - name: execute-compute-bigbed-file-metadata
            depends: >- 
              convert-narrow-bed-to-bigbed.Succeeded || convert-broad-bed-to-bigbed.Succeeded
            templateRef:
              name: compute-file-metadata-pvc-callable-v1-submittable
              template: compute-file-metadata-pvc-callable
            arguments:
              parameters:
                - name: pvc-name
                  value: "{{inputs.parameters.pvc-name}}"
                - name: filename
                  value: "{{=sprig.base(inputs.parameters['peak-bigbed-s3-key'])}}"

          - name: execute-post-peak-bigbed-file
            depends: execute-compute-bigbed-file-metadata
            templateRef:
              name: analysis-file-post-request-payload-v1-submittable
              template: analysis-file-post-request-payload
            arguments:
              parameters:
                - name: s3-key
                  value: "{{inputs.parameters.peak-bigbed-s3-key}}"
                - name: basename
                  value: "{{=sprig.trimSuffix(sprig.ext(inputs.parameters['peak-bigbed-s3-key']), sprig.base(inputs.parameters['peak-bigbed-s3-key']))}}"
                - name: file-size
                  value: "{{tasks.execute-compute-bigbed-file-metadata.outputs.parameters.file-size}}"
                - name: md5sum
                  value: "{{tasks.execute-compute-bigbed-file-metadata.outputs.parameters.md5sum}}"
                - name: experiment-id
                  value: "{{inputs.parameters.experiment-id}}"
                - name: assembly-id
                  value: "{{inputs.parameters.assembly-id}}"
                - name: analysis-type
                  value: "peaks"

    - name: sort-peak-bed-cmd
      retryStrategy:
        limit: "5"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: peak-bed-filename
          - name: pvc-name
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: '{{inputs.parameters.pvc-name}}'
      container:
        workingDir: /mnt/vol
        image: ghcr.io/daugo/ensembl-reg-bedsort:latest
        command: [ bash, -c, -ue, -o, xtrace ]
        args: [
          "ls -altrh \
          && bedSort {{inputs.parameters.peak-bed-filename}} {{=sprig.trimSuffix(sprig.ext(inputs.parameters['peak-bed-filename']), sprig.base(inputs.parameters['peak-bed-filename']))}}.sorted.bed \
          && ls -altrh"
        ]
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
        resources:
          limits:
            cpu: 2900m
            memory: 10Gi
          requests:
            cpu: 2500m
            memory: 5Gi
    
    - name: convert-broad-bed-to-bigbed-cmd
      retryStrategy:
        limit: "5"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: peak-bed-filename
          - name: peak-bigbed-s3-key
          - name: pvc-name
          - name: chrom-sizes-s3-key

        artifacts:
          - name: chrom_sizes_file
            path: /mnt/vol/chrom.sizes
            s3:
              key: "{{inputs.parameters.chrom-sizes-s3-key}}"
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: '{{inputs.parameters.pvc-name}}'
      container:
        imagePullPolicy: Always
        workingDir: /mnt/vol
        image: ghcr.io/daugo/ensembl-reg-bed-to-bigbed:latest
        command: [ bash, -c, -ue, -o, xtrace ]
        args: [
          "ls -altrh \
          && rm -f {{=sprig.base(inputs.parameters['peak-bigbed-s3-key'])}} \
          && bedToBigBed -tab -type=bed12+3 {{=sprig.trimSuffix(sprig.ext(inputs.parameters['peak-bed-filename']), sprig.base(inputs.parameters['peak-bed-filename']))}}.sorted.bed chrom.sizes {{=sprig.base(inputs.parameters['peak-bigbed-s3-key'])}} \
          && ls -altrh"
        ]
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
        resources:
          limits:
            cpu: 2900m
            memory: 10Gi
          requests:
            cpu: 2500m
            memory: 5Gi
      outputs:
        artifacts:
          - name: final_bigbed
            path: "/mnt/vol/{{=sprig.base(inputs.parameters['peak-bigbed-s3-key'])}}"
            archive:
              none: { }
            s3:
              key: "{{inputs.parameters.peak-bigbed-s3-key}}"

    - name: convert-narrow-bed-to-bigbed-cmd
      retryStrategy:
        limit: "5"
        retryPolicy: "OnError"
      inputs:
        parameters:
          - name: peak-bed-filename
          - name: peak-bigbed-s3-key
          - name: pvc-name
          - name: chrom-sizes-s3-key

        artifacts:
          - name: chrom_sizes_file
            path: /mnt/vol/chrom.sizes
            s3:
              key: "{{inputs.parameters.chrom-sizes-s3-key}}"
      volumes:
        - name: workdir
          persistentVolumeClaim:
            claimName: '{{inputs.parameters.pvc-name}}'
      container:
        imagePullPolicy: Always
        workingDir: /mnt/vol
        image: ghcr.io/daugo/ensembl-reg-bed-to-bigbed:latest
        command: [ bash, -c, -ue, -o, xtrace ]
        args: [
          "ls -altrh \
          && rm -f {{=sprig.base(inputs.parameters['peak-bigbed-s3-key'])}} \
          && bedToBigBed -as=/workdir/bigNarrowPeak.as -type=bed6+4 {{=sprig.trimSuffix(sprig.ext(inputs.parameters['peak-bed-filename']), sprig.base(inputs.parameters['peak-bed-filename']))}}.sorted.bed chrom.sizes {{=sprig.base(inputs.parameters['peak-bigbed-s3-key'])}} \
          && ls -altrh"
        ]
        volumeMounts:
          - name: workdir
            mountPath: /mnt/vol
        resources:
          limits:
            cpu: 2900m
            memory: 10Gi
          requests:
            cpu: 2500m
            memory: 5Gi
      outputs:
        artifacts:
          - name: final_bigbed
            path: "/mnt/vol/{{=sprig.base(inputs.parameters['peak-bigbed-s3-key'])}}"
            archive:
              none: { }
            s3:
              key: "{{inputs.parameters.peak-bigbed-s3-key}}"
 
